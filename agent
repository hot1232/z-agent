#!/usr/bin/env python2.7
# -*- coding:utf8 -*-

#from gevent.threadpool import ThreadPool
#from gevent.pool import Pool
import os
import gc
import sys
import gevent

from runner.agent import Agent
from lib.log import logging


def daemon():
    __doc__ = '''
    name: daemon
    description: daemonize main process
    input:
          None
    output:
          None
    '''
    pid=os.fork();
    logger=logging.getLogger("agent")
    if pid > 0:
        sys.exit(0);
    elif pid == 0:
        #os.chdir("/");
        #os.umask(0);
        #os.setsid();
        pid2=os.fork();
        if pid2 > 0:
            logger.info("daemon start with pid: {0}".format(pid2))
            open("/var/run/agent.pid","w").write("%s"%pid2);
        elif pid2 == 0:
            for f in sys.stdout, sys.stderr: f.flush();
            si = file("/dev/null", 'r');
            so = open("/tmp/z-agent.log",'a');
            os.dup2(si.fileno(), sys.stdin.fileno())
            os.dup2(so.fileno(), sys.stdout.fileno())
            os.dup2(so.fileno(), sys.stderr.fileno())
            try:
                Agent.main();
                while True:
                    logger.info("gc start")
                    gc.collect()
                    logger.info("gc end")
                    #scanner.dump_all_objects('/tmp/dump%s.txt' % time.time())                    
                    gevent.sleep(1800)
            except Exception,e:
                logger.exception(e)
        else:
            logger.error("2 fork failed");
    else:
        logger.error("fork failed!");



if __name__ == "__main__":
    gc.enable()
    #gc.set_debug(gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE | gc.DEBUG_INSTANCES | gc.DEBUG_OBJECTS | gc.DEBUG_LEAK)    
    daemon()
    #logger=logging.getLogger("agent")
    #Agent.main()
    #while True:
        #logger.info("gc start")
        #gc.collect()
        #logger.info("gc end")
        #gevent.sleep(1800)

        