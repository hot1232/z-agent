#!/usr/bin/env python2.7
# -*- coding:utf8 -*-

from gevent import monkey
monkey.patch_all()

import gevent
from gevent.threadpool import ThreadPool
from gevent.pool import Pool
from gevent.server import StreamServer
from socket import error as socket_error
import imp
import os
import signal
import time

import checker
import facter
import sender.zbx
from lib.link import Chanels

from sender import ResultsSender
from discovery import DiscoveryRunner
from executor import Executor


class Collector(object):
    def __new__(cls, *args, **kw):  
        if not hasattr(cls, '_instance'):  
            orig = super(Collector, cls)  
            cls._instance = orig.__new__(cls, *args, **kw)  
        return cls._instance    
    def __init__(self,collecttype="checker"):
        self.mod_list={}
        curdir=os.path.dirname(os.path.realpath(__file__))
        for cwd,subdirs,files in os.walk(os.path.join(curdir,collecttype)):
            import_prefix=collecttype
            for mod in files:
                if mod.endswith(".py") and mod != "__init__.py":
                    mod_name="%s.%s"%(import_prefix,mod.rstrip(".py"))
                    file, pathname, desc = imp.find_module(mod.rstrip(".py"),[os.path.join(curdir,cwd)])
                    self.mod_list[mod.rstrip(".py")]=imp.load_module(mod_name,file,pathname,desc)        
    
    def __iter__(self):
        return iter(self.mod_list.keys())
    def __getitem__(self,key):
        if key in self.mod_list:
            return self.mod_list[key]
        else:
            self.__iter__()
    
        
class ZbxAgent(object):
    def __init__(self):
        pass
    
    def accept_system_uname(self):
        pass
    
    def accept_system_hostname(self):
        pass                

class Agent(object):
    def __init__(self,**kwarg):
        self.checker_list=[]
        self.server=None
        self.sender=None
        self._checker_list=[]
        self._facter_list=[]
        self._discovery_list=[]
        self._discoverier_spawn_dict={}
        for k,v in kwarg.items():
            setattr(self, k, v)
    
    def run_checker(self):
        #start worker thread pool
        #这段代码需要再分析一下
        
        self._checker_list=Collector()
        
        for checker in self._checker_list:
            ck=self._checker_list[checker].Checker()
            #非单例的使用方式
            #ck2=cc[checker].Checker(_name="test")
            ck.spawn()
            self.checker_list.append(ck)        
    
    def run_facter(self):
        self._facter_list=Collector(collecttype="facter")
        for facter in self._facter_list:
            fact=self._facter_list[facter].Facter()
            for name in fact:
                print("%s: %s"%(name,fact[name]))
    
    def run_zbxtrapsender(self):
        self.sender=ResultsSender()
        self.sender.spawn(sender=sender.zbx.Sender,mType="items")
    
    def run_executor(self):
        #需要添加配置读取代码
        self.server = StreamServer(('',10050), Executor(), backlog=100000)
        self.server.init_socket()
        gevent.signal(signal.SIGQUIT, self.gevent_shutdown,self.checker_list,self.server,self.sender)
        gevent.signal(signal.SIGINT,self.gevent_shutdown,self.checker_list,self.server,self.sender)          
        self.server.start()
        self.server.start_accepting()
        self.server._stop_event.wait()
    
    def run_discovery(self):
        def run_background(interval,task_list):
            while True:
                start_t=int(time.time())
                result=[]
                for task in task_list:
                    send=sender.discovery.Sender(task.run())
                    send.send()
                used_t = int(time.time())-start_t
                gevent.sleep(interval-used_t)
        self._discoverier_list=Collector(collecttype="discovery")
        self._discover_runner_list={}
        for discoverier in self._discoverier_list:
            #get run_interval and then init
            # ....
            run_interval=0
            discover = self._discoverier_list[discoverier].Discovery(run_interval=run_interval)
            if self._discoverier_list.has_key(discoverier):
                self._discoverier_list.update({run_interval:{discoverier:discover}})
            else:
                self._discoverier_list[run_interval].update({discoverier:discover})
        
        for discoer_interval in self._discoverier_list:
            worker=gevent.spawn(run_background,*(discoer_interval,self._discoverier_list[discoer_interval]))
            if not discoer_interval in self._discoverier_spawn_dict:
                self._discoverier_spawn_dict.update({discoer_interval:[]})
            if not worker in self._discoverier_spawn_dict[discoer_interval]:
                self._discoverier_spawn_dict[discoer_interval].append(worker)
            
    
    def gevent_shutdown(self,checker_list,server,sender):
        gevent.killall(self.checker_list)
        server.stop()
        gevent.killall([sender])
        for interval in self._discoverier_spawn_dict:
            gevent.killall(self._discoverier_spawn_dict[interval])
    
    @classmethod
    def main(cls):
        agent=cls()
        agent.run_checker()
        agent.run_zbxtrapsender()
        agent.run_facter()
        agent.run_discovery()
        agent.run_cmdserver()
    
    
        

if __name__ == "__main__":
    Agent.main()